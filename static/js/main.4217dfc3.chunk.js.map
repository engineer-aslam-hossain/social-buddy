{"version":3,"sources":["components/Post/Post.js","components/Posts/Posts.js","components/Comment/Comment.js","components/Comments/Comments.js","components/SinglePost/SinglePost.js","components/NoMatch/NoMatch.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","margin","padding","display","justifyContent","alignItems","flexDirection","border","background","title","fontSize","textAlign","body","Post","props","post","id","classes","Card","className","CardContent","Typography","gutterBottom","variant","component","CardActions","to","Button","color","Posts","useState","posts","SetPosts","useEffect","fetch","then","res","json","map","key","theme","details","flex","cover","width","height","borderRadius","Comment","comment","name","email","postId","RandomUser","SetRandomUser","data","results","picture","large","content","CardMedia","image","Comments","SetComments","comments","heading","fontWeight","borderBottom","SinglePost","useParams","SetSinglePost","NoMatch","Header","App","exact","path","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4217dfc3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 700,\r\n    margin: \"20px auto\",\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    border: \"none\",\r\n    background: \"linear-gradient(to bottom, #ff5d8f, #fadde1)\",\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    textAlign: \"center\",\r\n  },\r\n  body: {\r\n    textAlign: \"center\",\r\n  },\r\n});\r\nconst Post = props => {\r\n  const { title, body, id } = props.post;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography className={classes.title} gutterBottom>\r\n            Post ID : {id}\r\n          </Typography>\r\n          <Typography className={classes.title} gutterBottom>\r\n            Post Title : 👉 {title}\r\n          </Typography>\r\n          <Typography className={classes.body} variant='body2' component='p'>\r\n            Post Body : 👉 {body}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Link to={`/single_post/${id}`}>\r\n            <Button variant='contained' color='primary'>\r\n              See More...\r\n            </Button>\r\n          </Link>\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Post from \"../Post/Post\";\r\n\r\nconst Posts = () => {\r\n  const [posts, SetPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(res => res.json())\r\n      .then(posts => SetPosts(posts));\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {posts.map(post => (\r\n        <Post key={post.id} post={post} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    margin: \"20px 40px\",\r\n    padding: \"40px\",\r\n    justifyContent: \"between\",\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n  },\r\n  cover: {\r\n    width: \"150px\",\r\n    height: \"150px\",\r\n    border: \"3px solid #ffba08\",\r\n    borderRadius: \"50%\",\r\n  },\r\n}));\r\nconst Comment = props => {\r\n  const classes = useStyles();\r\n  const { name, email, body, postId } = props.comment;\r\n\r\n  const [RandomUser, SetRandomUser] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://randomuser.me/api/\")\r\n      .then(res => res.json())\r\n      .then(data => SetRandomUser(data.results[0].picture.large));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <div className={classes.details}>\r\n          <CardContent className={classes.content}>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              Post ID: {postId}\r\n            </Typography>\r\n            <Typography component='h5' variant='h5' gutterBottom>\r\n              Comment Title : ☑️ {name}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              Comment Body : ☑️ {body}\r\n            </Typography>\r\n          </CardContent>\r\n        </div>\r\n        <CardMedia\r\n          className={classes.cover}\r\n          image={RandomUser}\r\n          title='Live from space album cover'\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Comment from \"../Comment/Comment\";\r\n\r\nconst Comments = props => {\r\n  const [Comments, SetComments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://jsonplaceholder.typicode.com/comments?postId=${props.postId}`\r\n    )\r\n      .then(res => res.json())\r\n      .then(comments => SetComments(comments));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {Comments.map(comment => (\r\n        <Comment key={comment.id} comment={comment} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Comments from \"../Comments/Comments\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 700,\r\n    margin: \"20px auto\",\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    border: \"none\",\r\n    background: \"linear-gradient(to bottom, #ff5d8f, #fadde1)\",\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    textAlign: \"center\",\r\n  },\r\n  heading: {\r\n    fontSize: 30,\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    fontWeight: 600,\r\n    borderBottom: \"3px solid #ff5d8f\",\r\n    width: \"250px\",\r\n    margin: \"0 auto\",\r\n  },\r\n  body: {\r\n    textAlign: \"center\",\r\n  },\r\n});\r\nconst SinglePost = () => {\r\n  const { postId } = useParams();\r\n  const [SinglePost, SetSinglePost] = useState([]);\r\n\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`)\r\n      .then(res => res.json())\r\n      .then(post => SetSinglePost(post));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Typography className={classes.heading} gutterBottom>\r\n        Single Post\r\n      </Typography>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography className={classes.title} gutterBottom>\r\n            Post ID : ✍️ {postId}\r\n          </Typography>\r\n          <Typography className={classes.title} gutterBottom>\r\n            Post Title : 👉 {SinglePost.title}\r\n          </Typography>\r\n          <Typography className={classes.body} variant='body2' component='p'>\r\n            Post Body : 👉 {SinglePost.body}\r\n            <br />\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Typography className={classes.heading} gutterBottom>\r\n        Comments Are\r\n      </Typography>\r\n      <Comments postId={postId} />\r\n    </div>\r\n  );\r\n};\r\nexport default SinglePost;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    margin: \"20vh 40px\",\r\n    padding: \"40px\",\r\n  },\r\n  details: {\r\n    margin: \"0 auto\",\r\n  },\r\n}));\r\nconst NoMatch = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <div className={classes.details}>\r\n          <CardContent>\r\n            <Typography component='h5' variant='h5' gutterBottom>\r\n              Post Details ❌ !!! 404 ERROR !!! ❌ Path Cannot Find..\r\n            </Typography>\r\n          </CardContent>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nconst Header = () => {\r\n  return (\r\n    <div className='header'>\r\n      <h1>Social Buddy Post App</h1>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Posts from \"./components/Posts/Posts\";\nimport SinglePost from \"./components/SinglePost/SinglePost\";\nimport NoMatch from \"./components/NoMatch/NoMatch\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Header />\n      <Router>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n            <Posts />\n          </Route>\n          <Route path='/single_post/:postId'>\n            <SinglePost />\n          </Route>\n          <Route path='*'>\n            <NoMatch />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}